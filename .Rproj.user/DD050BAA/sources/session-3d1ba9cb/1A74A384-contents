
# setup ------------------------------------------------------------------------

setwd("/media/shorty/Storage/Dropbox/Consulting/22-619 CBC Road Ahead 2022/3 - Data analysis/")
source("/media/shorty/Storage/Dropbox/Consulting/22-619 CBC Road Ahead 2022/3 - Data analysis/cbctra2022_dataset_setup.R")
setwd("/media/shorty/Storage/Dropbox/Consulting/CBC TRA Merged Datafile")
names(rawdata)

library(tidyverse)
library(labelled)
library(sjlabelled)
library(survey)
rawdata$region <- tra2022$region
rawdata$agegrp <- tra2022$agegrp
rawdata$gender <- tra2022$gender
rawdata$educ <- tra2022$educ
rawdata$educ[rawdata$d7==9] <- NA
rawdata$empstatus <- tra2022$empstatus
rawdata$ogjob <- tra2022$ogjob
rawdata$density <- tra2022$density
rawdata$relig <- tra2022$relig
rawdata$relig <- car::recode(tra2022$relig, '1:2 = "Very/somewhat"; 3:4="Not very/not at all"', as.factor = TRUE)
rawdata$incomegrp <- tra2022$incomegrp
s <- svydesign(~1, data = rawdata, weights = ~weight)
bannervars <- names(s$variables)[77:length(names(s$variables))]


likertlabs <- get_labels(rawdata$a2a)
likertlabs[[5]] <- "DKNA"
likertlabs
netlabs <- c(paste(likertlabs[[1]], "+", likertlabs[[2]]),
             paste(likertlabs[[3]], "+", likertlabs[[4]]),
             likertlabs[[5]])
netlabs


jbor_pal <- c("#AEB5B4",  # grey
              "#E04541", # dark red
              "#F5B3B4", # light red
              "#A5E5ED", # light blue
              "#33C7DB" # dark blue
              )

# univariate frequency table
survey::svytable(~a2a, s, round = TRUE) %>%
  as.data.frame() %>%
  dplyr::mutate(pct =  round(Freq/sum(Freq), 4)) # %>% select(-Freq)


# bivariate frequency table
survey::svytable(~a2a+region, s, round = TRUE) %>%
  dplyr::as_tibble() %>%
  dplyr::group_by(region) %>%
  dplyr::mutate(pct =  round(n/sum(n), 4))


# omnibus bivariate frequency table
mylist <- c("region", "agegrp")
myforms <- list(as.formula(paste0("~", "a2a", "+", mylist[[1]])),
                as.formula(paste0("~", "a2a", "+", mylist[[2]])))
listout <- lapply(1:length(mylist), function(i) {
  survey::svytable(myforms[[i]], s, round = TRUE) %>%
  dplyr::as_tibble() %>%
  dplyr::group_by(!!sym(mylist[[i]])) %>%
  dplyr::mutate(pct =  round(n/sum(n), 4))
})


# FUN non-svy ctabs ------------------------------------------------------------

# univariate frequency table
table(rawdata$a2a) %>%
  as.data.frame() %>%
  dplyr::mutate(pct =  round(Freq/sum(Freq), 4))

rawdata %>%
  dplyr::as_tibble() %>%
  dplyr::group_by(a2a) %>%
  dplyr::summarise(n = n()) %>%
  dplyr::mutate(pct =  round(n/sum(n), 4))


# bivariate frequency table
table(rawdata$a2a, rawdata$region) %>%
  as.data.frame() %>%
  dplyr::group_by(Var2) %>%
  dplyr::mutate(pct =  round(Freq/sum(Freq), 4))

rawdata %>%
  dplyr::as_tibble() %>%
  dplyr::group_by(region, a2a) %>%
  dplyr::summarise(n = n()) %>%
  dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
  dplyr::select(-n) %>%
  tidyr::pivot_wider(names_from = region, values_from = pct)



ctab.data.frame <- function(design,
                            yvar,
                            xvar,
                            ...) {

  xt <- design %>%
    dplyr::as_tibble() %>%
    dplyr::group_by(!!sym(xvar), !!sym(yvar)) %>%
    dplyr::summarise(n = n()) %>%
    dplyr::mutate(pct =  round(n/sum(n), 4))

  tot <- design %>%
    dplyr::as_tibble() %>%
    dplyr::group_by(!!sym(yvar)) %>%
    dplyr::summarise(n = n()) %>%
    dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
    dplyr::mutate(!!sym(xvar) := "Total", .after = 1)

  out <- rbind(xt, tot) %>% dplyr::relocate(!!sym(yvar), .before = 1)

  if(isFALSE(is.null(attr(design[[yvar]], "labels")))) {
    ylabs <- sjlabelled::get_labels(design[[yvar]])
    xlabs <- c(sjlabelled::get_labels(design[[xvar]]), "Total")
    out <- out %>% dplyr::mutate(!!sym(yvar) := ylabs)
    out[[yvar]] <- factor(out[[yvar]], levels = ylabs)
    out[[xvar]] <- factor(out[[xvar]], levels = xlabs)
  }
  if(isFALSE(is.null(attr(design[[yvar]], "label")))) {
  attr(out, "label") <- sjlabelled::get_label(design[[yvar]])
  }

  return(out)
}

ctab.data.frame(rawdata, yvar = "a2a", xvar = "region")


ctabs.data.frame <- function(design,
                             yvar,
                             xvars, ...) {

  if(isFALSE(is.null(attr(design[[yvar]], "labels")))) {
    ylabs <- sjlabelled::get_labels(design[[yvar]])
  } else { ylabs <- levels(as.factor(design[[yvar]]))}

  xlabs <- lapply(1:length(xvars), function(i) {
    if(isFALSE(is.null(attr(design[[xvars[[i]]]], "labels")))) {
      sjlabelled::get_labels(design[[xvars[[i]]]])
    } else { levels(as.factor(design[[xvars[[i]]]]))}
  })

  myforms <- lapply(1:length(xvars), function(i) {
    as.formula(paste0("~", yvar, "+", xvars[[i]]))
  })

  totals <- design %>%
    dplyr::as_tibble() %>%
    dplyr::group_by(!!sym(yvar)) %>%
    dplyr::summarise(n = n()) %>%
    dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
    dplyr::mutate(Total := "Total", .after = 1)
  totals[[yvar]] <- ylabs
  totals[[yvar]] <- factor(totals[[yvar]], levels = ylabs)

  xt_list <- lapply(1:length(xvars), function(i) {
    design %>%
      dplyr::as_tibble() %>%
      dplyr::group_by(!!sym(xvars[[i]]), !!sym(yvar)) %>%
      dplyr::summarise(n = n()) %>%
      dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
      dplyr::mutate(!!sym(yvar) := ylabs) %>%
      dplyr::mutate(!!sym(yvar) := factor(!!sym(yvar), levels = ylabs),
                    !!sym(xvars[[i]]) := factor(!!sym(xvars[[i]]), levels = xlabs[[i]])) %>%
      dplyr::relocate(!!sym(yvar), .before = 1)
  })
  names(xt_list) <- xvars

  # pivoting to create omnibus summary crosstab
  omnixt <- lapply(1:length(xt_list), function(i) {
    xt_list[[i]] <- xt_list[[i]] %>%
      dplyr::select(-n) %>%
      tidyr::pivot_wider(names_from = !!sym(xvars[[i]]), values_from = pct)
  })
  omnixt <- do.call("cbind", omnixt)
  omnixt <- omnixt[!duplicated(as.list(omnixt))] %>% dplyr::as_tibble()
  total_pct <- totals %>%
    dplyr::select(-n) %>%
    tidyr::pivot_wider(names_from = 2, values_from = pct)
  omnixt <- omnixt %>%
    dplyr::mutate(Total = total_pct$Total, .after = 1)

  out <- list(
    "Summary Table" = omnixt,
    "Total" = totals)
  out <- append(out, xt_list)

  if(isFALSE(is.null(attr(design[[yvar]], "label")))) {
    attr(out, "label") <- sjlabelled::get_label(design[[yvar]])
  }

  return(out)

}

z <- ctabs.data.frame(rawdata, yvar = "a2a", xvars = c("region", "gender"))
z[[1]]
z[[2]]
z[[3]]



# FUN ctabs --------------------------------------------------------------------


ctab.svydesign <- function(design,
                           yvar,
                           xvar, ...) {

  xt <- survey::svytable(as.formula(paste0("~", yvar, "+", xvar)),
                          design, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::group_by(!!sym(xvar)) %>%
    dplyr::mutate(pct =  round(n/sum(n), 4))

  tot <- survey::svytable(as.formula(paste0("~", yvar)),
                             design, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
    dplyr::mutate(!!sym(xvar) := "Total", .after = 1)

  out <- rbind(xt, tot)

  if(isFALSE(is.null(attr(design$variables[[yvar]], "labels")))) {
    ylabs <- sjlabelled::get_labels(design$variables[[yvar]])
    xlabs <- c(sjlabelled::get_labels(design$variables[[xvar]]), "Total")
    out <- out %>% dplyr::mutate(!!sym(yvar) := ylabs)
    out[[yvar]] <- factor(out[[yvar]], levels = ylabs)
    out[[xvar]] <- factor(out[[xvar]], levels = xlabs)
  }
  if(isFALSE(is.null(attr(design$variables[[yvar]], "label")))) {
    attr(out, "label") <- sjlabelled::get_label(design$variables[[yvar]])
  }

  return(out)
}
testout <- ctab.svydesign(s, yvar = "a2a", xvar = "region")
testout
summary(testout)




# FUN ctabs omnibus ------------------------------------------------------------

# omnibus bivariate frequency table
mylist <- c("region", "gender", "agegrp", "educ")
myforms <- lapply(1:length(mylist), function(i) {
  as.formula(paste0("~", "a2a", "+", mylist[[i]]))
})
listout <- lapply(1:length(mylist), function(i) {
  survey::svytable(myforms[[i]], s, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::group_by(!!sym(mylist[[i]])) %>%
    dplyr::mutate(pct =  round(n/sum(n), 4))
})
View(listout[[1]])
View(listout[[4]])
listout_t <- lapply(1:length(listout), function(i) {
  listout[[i]] <- listout[[i]] %>%
    select(-n) %>%
    pivot_wider(names_from = 2,
                values_from = pct) # %>% mutate(a2a = likertlabs)
})
View(listout_t[[1]])
View(listout_t[[2]])
listout_final <- do.call("cbind", listout_t)
listout_final <- listout_final[!duplicated(as.list(listout_final))]





ctabs.svydesign <- function(design,
                            yvar,
                            xvars, ...) {

  if(isFALSE(is.null(attr(design$variables[[yvar]], "labels")))) {
  ylabs <- sjlabelled::get_labels(design$variables[[yvar]])
    } else { ylabs <- levels(as.factor(design$variables[[yvar]]))}

  xlabs <- lapply(1:length(xvars), function(i) {
    if(isFALSE(is.null(attr(design$variables[[xvars[[i]]]], "labels")))) {
    sjlabelled::get_labels(design$variables[[xvars[[i]]]])
    } else { levels(as.factor(design$variables[[xvars[[i]]]]))}
  })

  myforms <- lapply(1:length(xvars), function(i) {
    as.formula(paste0("~", yvar, "+", xvars[[i]]))
  })

  totals <- survey::svytable(as.formula(paste0("~", yvar)),
                          design, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
    dplyr::mutate(Total := "Total", .after = 1)
  totals[[yvar]] <- ylabs
  totals[[yvar]] <- factor(totals[[yvar]], levels = ylabs)

  xt_list <- lapply(1:length(xvars), function(i) {
    survey::svytable(myforms[[i]], design, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::group_by(!!sym(xvars[[i]])) %>%
    dplyr::mutate(pct =  round(n/sum(n), 4),
                  !!sym(yvar) := ylabs,
                  !!sym(xvars[[i]]) := !!sym(xvars[[i]])) %>%
    dplyr::mutate(!!sym(yvar) := factor(!!sym(yvar), levels = ylabs),
                  !!sym(xvars[[i]]) := factor(!!sym(xvars[[i]]), levels = xlabs[[i]]))
  })
  names(xt_list) <- xvars

  # pivoting to create omnibus summary crosstab
  omnixt <- lapply(1:length(xt_list), function(i) {
    xt_list[[i]] <- xt_list[[i]] %>%
      dplyr::select(-n) %>%
      tidyr::pivot_wider(names_from = !!sym(xvars[[i]]), values_from = pct)
  })
  omnixt <- do.call("cbind", omnixt)
  omnixt <- omnixt[!duplicated(as.list(omnixt))] %>% as_tibble()
  total_pct <- totals %>%
    dplyr::select(-n) %>%
    tidyr::pivot_wider(names_from = !!sym(yvar), values_from = pct)
  omnixt <- omnixt %>%
    dplyr::mutate(Total = total_pct$Total, .after = 1)

  out <- list(
    "Summary Table" = omnixt,
    "Total" = totals)
  out <- append(out, xt_list)

  if(isFALSE(is.null(attr(design$variables[[yvar]], "label")))) {
  attr(out, "label") <- sjlabelled::get_label(design$variables[[yvar]])
  }

  return(out)

}
banners <- c("region", "gender", "agegrp", "educ")
out <- ctabs.svydesign(s, yvar = "a2a", xvars = banners)
View(out)
View(out[[1]])
View(out[[2]])
View(out[[3]])
View(out[[4]])
View(out[[5]])
View(out[[6]])


testout <- ctabs.svydesign(s, yvar = "a2a", xvars = bannervars)
View(testout)
View(testout[[1]])
View(testout[[2]])

out[[3]] %>%
  dplyr::select(-pct) %>%
  tidyr::pivot_wider(names_from = a2a,
                     values_from = n) %>%
  dplyr::mutate(Agree = `Strongly agree` + `Somewhat agree`,
                Disagree = `Strongly disagree` + `Somewhat disagree`) %>%
  dplyr::select(-c(`Strongly agree`,`Somewhat agree`, `Strongly disagree`, `Somewhat disagree`)) %>%
  tidyr::pivot_longer(-1) %>%
  dplyr::rename(n = value,
                a2a = name) %>%
  dplyr::group_by(region) %>%
  dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
  dplyr::select(-n) %>%
  tidyr::pivot_wider(names_from = region, values_from = pct)



likertnets <- function(obj, ...) {

  xvars <- names(obj[2:length(obj)])
  yvar <- names(obj[[1]][1])

  # omnibus <- obj[[2]]
  #   dplyr::select(-pct) %>%
  #   tidyr::pivot_wider(names_from = 1,
  #                      values_from = n) %>%
  #   dplyr::mutate(Agree = `Strongly agree` + `Somewhat agree`,
  #                 Disagree = `Strongly disagree` + `Somewhat disagree`) %>%
  #   dplyr::select(-c(`Strongly agree`,`Somewhat agree`, `Strongly disagree`, `Somewhat disagree`)) %>%
  #   tidyr::pivot_longer(-1) %>%
  #   dplyr::rename(n = value) %>%
  #   dplyr::group_by(1) %>%
  #   dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
  #   dplyr::select(-n) %>%
  #   tidyr::pivot_wider(names_from = 1, values_from = pct)

  xt_list <- obj[2:length(obj)]
  xt_list <- lapply(1:length(xt_list), function(i){
    xt_list[[i]] %>%
      dplyr::select(-pct) %>%
      tidyr::pivot_wider(names_from = !!sym(yvar),
                         values_from = n) %>%
      dplyr::mutate(Agree = `Strongly agree` + `Somewhat agree`,
                    Disagree = `Strongly disagree` + `Somewhat disagree`) %>%
      dplyr::select(-c(`Strongly agree`,`Somewhat agree`, `Strongly disagree`, `Somewhat disagree`)) %>%
      tidyr::pivot_longer(-1) %>%
      dplyr::rename(n = value) %>%
      dplyr::group_by(!!sym(xvars[[i]])) %>%
      dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
      dplyr::rename(!!sym(yvar) := name) %>%
      dplyr::relocate(2, .before = 1) # %>% dplyr::select(-n) %>% tidyr::pivot_wider(names_from = 1, values_from = pct)
  })
  names(xt_list) <- xvars

   # pivoting to create omnibus summary crosstab
   omnixt <- lapply(1:length(xt_list), function(i) {
     xt_list[[i]] <- xt_list[[i]] %>%
       dplyr::select(-n) %>%
       tidyr::pivot_wider(names_from = !!sym(xvars[[i]]),
                          values_from = pct)
   })
   omnixt <- do.call("cbind", omnixt)
   omnixt <- omnixt[!duplicated(as.list(omnixt))] %>% as_tibble()
   total_pct <- xt_list[[1]] %>%
     dplyr::select(-n)  %>% tidyr::pivot_wider(names_from = 2, values_from = pct)
   omnixt <- omnixt %>%
     dplyr::mutate(Total = total_pct$Total, .after = 1) %>%
     dplyr::rename(!!sym(yvar) := 1)

   out <- list("Summary Table" = omnixt)
   out <- append(out, xt_list)

   for(i in 1:length(out)) {
     out[[i]] <- dplyr::bind_rows(obj[[i]], out[[i]]) %>%
       unique()
   }
   for(i in 2:length(out)) {
     out[[i]] <- out[[i]] %>%
       dplyr::arrange(!!sym(names(out)[[i]]))
   }

   if(isFALSE(is.null(attr(obj, "label")))) {
   attr(out, "label") <- attr(obj, "label")
   }
  return(out)
}

testout2 <- likertnets(testout)
View(testout2)
View(testout2[[1]])
View(testout2[[2]])
View(testout2[[3]])
View(testout2[[4]])
View(testout2[[5]])
View(testout2[[6]])


### trying to generalize to multiple levels -----------------------------------



test <- testout[[2]] %>% select(-pct) %>% pivot_wider(names_from = a2a, values_from = n)
colnames(test)
paste(colnames(test)[2],"+",colnames(test)[3])
paste(colnames(test)[4],"+",colnames(test)[5])





# sig testing ------------------------------------------------------------------


## using rowwise (tends to underestimate significance vs StatXP) ---------------


dat <- testout2$educ
dat <- dat %>%
  dplyr::select(-pct) %>%
  tidyr::pivot_wider(names_from = 2,
                     values_from = n) %>%
  as.data.frame()
rownames(dat) <- dat[[1]]
dat <- dat %>% dplyr::select(-1)


pairlist <- combn(names(dat), 2, function(i) {
  d <- dat[i]
  names(d) <- i
  d
},
simplify = FALSE)
names(pairlist) <- sapply(1:length(pairlist), function(i) {
  paste(paste(colnames(pairlist[[i]][1]),"-",colnames(pairlist[[i]][2])))
})
pairlist_tests <- lapply(1:length(pairlist), function(i) {
  rstatix::row_wise_prop_test(pairlist[[i]], correct = TRUE, detailed = TRUE, p.adjust.method = "bonferroni")
})
# names(pairlist_tests) <- names(pairlist)
pairlist_pvals <- lapply(1:length(pairlist), function(i) {
  pairlist_tests[[i]]$`p.adj`
})
# names(pairlist_pvals) <- names(pairlist)
pairlist_sig <- NULL
for(i in 1:length(pairlist_pvals)) {
  pairlist_sig[[i]] <- ifelse(pairlist_pvals[[i]] < .05, "*", "")
}
names(pairlist_sig) <- names(pairlist)
sigdiffs <- do.call("cbind", pairlist_sig)
rownames(sigdiffs) <- rownames(dat)
sigdiffs



testdiffs <- function(obj, adj.p = FALSE, ...) {

  if(isTRUE(adj.p)) {
    pval <- "p.adj"
  } else {
    pval <- "p"
  }

  xvars <- names(obj[3:length(obj)])
  yvar <- names(obj[[1]][1])

  xt_list <- obj[3:length(obj)]
  names(xt_list) <- xvars

  out <- NULL
  for(x in 1:length(xt_list)) {

    dat <- xt_list[[x]] %>%
      dplyr::select(-pct) %>%
      tidyr::pivot_wider(names_from = 2, values_from = n) %>%
      as.data.frame()
    rownames(dat) <- dat[[1]]
    dat <- dat %>% dplyr::select(-1)

    pairlist <- combn(names(dat), 2, function(i) {
      d <- dat[i]
      names(d) <- i
      d
    },
    simplify = FALSE)

    names(pairlist) <- sapply(1:length(pairlist), function(i) {
      paste(colnames(pairlist[[i]][1]),"-",colnames(pairlist[[i]][2]))
    })
    pairlist_tests <- lapply(1:length(pairlist), function(i) {
      rstatix::row_wise_prop_test(pairlist[[i]], correct = TRUE, detailed = TRUE)
    })
    # names(pairlist_tests) <- names(pairlist)
    pairlist_pvals <- lapply(1:length(pairlist), function(i) {
      pairlist_tests[[i]][pval]
    })
    # names(pairlist_pvals) <- names(pairlist)
    pairlist_sig <- NULL
    for(i in 1:length(pairlist_pvals)) {
      pairlist_sig[[i]] <- ifelse(pairlist_pvals[[i]] < .05, "*", "")
    }
    names(pairlist_sig) <- names(pairlist)
    sigdiffs <- do.call("cbind", pairlist_sig)
    rownames(sigdiffs) <- rownames(dat)

    out[[x]] <- sigdiffs

  }

  names(out) <- xvars
  return(out)
}


library(tictoc)
tic()
testout5 <- testdiffs(testout2, adj.p = TRUE)
toc()
View(testout5)
View(testout5$region)










### build into omnibus function ------------------------------------------------

names(testout2)


testout3 <- NULL
# for(n in 3:length(testout2)) {
testout3 <- lapply(3:length(testout2), function(x) {

  dat <- testout2[[x]]
  dat <- dat %>%
    dplyr::select(-pct) %>%
    tidyr::pivot_wider(names_from = 2,
                       values_from = n) %>%
    as.data.frame()
  rownames(dat) <- dat[[1]]
  dat <- dat %>% dplyr::select(-1)

  pairlist <- combn(names(dat), 2, function(i) {
    d <- dat[i]
    names(d) <- i
    d
  }, simplify = FALSE)
  pairlist_tests <- lapply(1:length(pairlist), function(i) {
    rstatix::row_wise_prop_test(pairlist[[i]], correct = FALSE, detailed = TRUE)
  })
  pairlist_pvals <- lapply(1:length(pairlist), function(i) {
    pairlist_tests[[i]]$`p`
  })
  pairlist_sig <- NULL
  for(i in 1:length(pairlist_pvals)) {
    pairlist_sig[[i]] <- ifelse(pairlist_pvals[[i]] < .05, "p<0.05", "")
  }
  names(pairlist_sig) <- sapply(1:length(pairlist), function(i) {
    paste(paste(colnames(pairlist[[i]][1]),"-",colnames(pairlist[[i]][2])))
  })

  out <- cbind(dat, do.call("cbind", pairlist_sig))
  return(out)
})
names(testout3) <- names(testout2)[3:length(testout2)]
testout4 <- list("Summary Table" = testout2[[1]], "Total" = testout2[[2]])
testout4 <- append(testout4, testout3)
View(testout4[[1]])
View(testout4[[2]])
View(testout4[[3]])
View(testout4[[4]])

myouttbl <- testout4[[9]][1:3]
myoutsig <- testout4[[9]][4:6]
glue::glue("Crosstab", {myouttbl})



## Using chisq.test and studentized residuals ----------------------------------

dat <- testout2$region
dat <- dat %>%
  select(-pct) %>%
  pivot_wider(names_from = region,
              values_from = n) %>%
  as.data.frame()
rownames(dat) <- dat[[1]]
dat <- dat %>%
  select(-1)
dat
dat_csq <- chisq.test(dat)

### Manual extraction ------
dat
dat_csq
dat_csq$residuals
dat_csq$stdres
dat_csq$stdres_test <- dat_csq$stdres %>%
  as.data.frame() %>%
  mutate("cal - edm" = Calgary - Edmonton,
         "cal - oth" = Calgary - `Other AB`,
         "edm - oth" = Edmonton - `Other AB`) %>%
  mutate("cal - edm sig" = case_when(abs(`cal - edm`) < 3.92 & abs(`cal - edm`) >= 3.28 ~ ".10",
                                     abs(`cal - edm`) >= 3.92 ~ ".05"),
         "cal - oth sig" = case_when(abs(`cal - oth`) < 3.92 & abs(`cal - oth`) >= 3.28 ~ ".10",
                                     abs(`cal - oth`) >= 3.92 ~ ".05"),
         "edm - oth sig" = case_when(abs(`edm - oth`) < 3.92 & abs(`edm - oth`) >= 3.28 ~ ".10",
                                     abs(`edm - oth`) >= 3.92 ~ ".05"))
dat_csq$stdres_test


### Functionally --------


combs <- combn(colnames(dat), 2)
pwise <- mapply(x = combs[2,], y = combs[1,], function(x, y) {
  select(dat, c(x,y))
})
cont_list <- lapply(1:ncol(pwise), function(i) {
  paste()
})
rownames(pwise)

cont_list <- NULL
i <- 1
j <- 1
while(i <= ncol(combs) ) {
  cont_list[[i]] <- paste(combs[[j]],"-",combs[[j+1]])
  i <- i + 1
  j <- j + 2
}
cont_list_names <- unlist(cont_list)


pairlist <- combn(names(dat), 2, function(i) {
  d <- dat[i]
  names(d) <- i
  d
},
simplify = FALSE)






## Rough work ------------------------------------------------------------------


# Row-wise proportion tests
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Data: Titanic
xtab <- as.table(rbind(
  c(180, 145), c(179, 106),
  c(510, 196), c(862, 23)
))
dimnames(xtab) <- list(
  Class = c("1st", "2nd", "3rd", "Crew"),
  Gender = c("Male", "Female")
)
xtab
# Compare the proportion of males and females in each category
prop_test(xtab)







tbl <- out2$region %>%
  select(-n) %>%
  pivot_wider(names_from = region,
              values_from = pct)
combs <- combn(colnames(tbl[,-1]), 2)


cont_list <- NULL
i <- 1
j <- 1
while(i <= ncol(combs) ) {
  cont_list[[i]] <- paste(combs[[j]],"-",combs[[j+1]])
    i <- i + 1
    j <- j + 2
}
cont_list_names <- unlist(cont_list)


pairs_list <- list(
  pairs_list[[1]] <- dat %>% select(c(Calgary, Edmonton)),
  pairs_list[[2]] <- dat %>% select(c(Calgary, "Other AB")),
  pairs_list[[3]] <- dat %>% select(c(Edmonton, "Other AB"))
)
pairs_list <- NULL
pairs_list <- list(
  pairs_list[[1]] <- dat %>% select(c(1, 2)),
  pairs_list[[2]] <- dat %>% select(c(1, 3)),
  pairs_list[[3]] <- dat %>% select(c(2, 3))
)
pairs_list[[1]]
pairs_list[[2]]
pairs_list[[3]]

pairs_list <- NULL
i <- 1
j <- 2
while(i <= ncol(combs) ) {
  if(j <=ncol(combs)) {
    pairs_list[[i]] <- dat[[i]]
    j <- j + 1
  } else {
    i <- i + 1
    j <- j - 2
  }
}
names(pairs_list) <- cont_list_names
combn(pairs_list, 2)



cont_list <- c(
  paste(combs[[1]],"-",combs[[2]]),
  paste(combs[[3]],"-",combs[[4]]),
  paste(combs[[5]],"-",combs[[6]])
)
cont_list <- c(
  paste(combs[1,1],"-",combs[2,1]),
  paste(combs[1,2],"-",combs[2,2]),
  paste(combs[1,3],"-",combs[2,3])
)
cont_list
combs[2,1]

pwise <- mapply(x = combs[2,], y = combs[1,], function(x, y) {
  select(dat, c(x,y))
})
cont_list <- lapply(1:ncol(pwise), function(i) {
  paste()
})
rownames(pwise)




mygrid <- list(
  "cal - edm" = select(dat, c(1,2)),
  "cal - oth" = select(dat, c(1,3)),
  "edm - oth" = select(dat, c(2,3))
)
mygrid_tests <- lapply(1:length(mygrid), function(i) {
  rstatix::row_wise_prop_test(mygrid[[i]])
})
names(mygrid_tests) <- names(mygrid)
for(i in 1:length(mygrid_tests)) {
  mygrid_tests[[i]]$contrast <- names(mygrid)[[i]]
}
mygrid_tests[[1]]
mygrid_tests[[2]]
mygrid_tests[[3]]
View(mygrid_tests[[1]])
View(mygrid_tests[[2]])
View(mygrid_tests[[3]])


dat <- out2$region %>% select(-pct)
test <- tidyr::expand(dat,
                      nesting(a2a, region))









dat %>% select(combs[,1])
dat %>% select(combs[,2])
dat %>% select(combs[,3])

combs <- combn(colnames(dat), 2)
pwise <- mapply(x = combs[2,], y = combs[1,], function(x, y) {
  select(dat, c(x,y))
})
pwise_ul <- unlist(pwise, recursive = FALSE)
pwise_ul <- mapply(x = pwise[2,], y = pwise[1,], function(x, y) {
  unlist(x) - unlist(y)
})


Pr_combs <- combn(colnames(Pr_combs), 2)
Pr_diffs <- mapply(x = Pr_combs[2,], y = Pr_combs[1,], function(x, y) {
  unlist(x) - unlist(y)
})


Pr_diffs <- relist(Pr_diffs, Pr_combs)
WgtPr_D <- NULL  # create list of weighted first differences
for (i in 1:nlevC2) {
  WgtPr_D[[i]] <-
    apply(Pr_diffs[[i]], 2, function(x)weighted.mean(x, data$`(weights)`))
}







mymat <- out[[3]] %>%
  dplyr::select(-pct) %>%
  pivot_wider(names_from = region,
              values_from = n)
as.matrix(mymat[,-1])
chisq.test(mymat[,-1])
fisher.test(mymat[,-1])


rstatix::pairwise_prop_test(mymat[,-1])


rstatix::fisher_test(mymat[,-1])

tab_chisq <- rstatix::chisq_test(mymat[,-1])
tab_chisqdesc <- rstatix::chisq_descriptives(tab_chisq, )
tab_coltests <- rstatix::pairwise_prop_test(mymat[,-1])


get_comparisons(s$variables, educ, ref.group = NULL)



s$variables$a2a_f <- as.factor(s$variables$a2a)
mod <- nnet::multinom(as.factor(a2a) ~ region, s$variables)
summary(mod)
anova(mod)
car::Anova(mod)
car::Anova(mod, type = "3")
mod_anv <- car::Anova(mod)




test <- janitor::tabyl(s$variables, a2a, region)
janitor::chisq.test(test)
rstatix::cramer_v(test, correct = FALSE)

library(DAMisc)
xt(s, "a2a", byvar = "region")


# FUN ctabsnet4 ----------------------------------------------------------------

ctabsnet4 <- function(design, yvar, xvar, ...) {

  design$variables[[yvar]][design$variables[[yvar]]==1] <- 1
  design$variables[[yvar]][design$variables[[yvar]]==2] <- 1
  design$variables[[yvar]][design$variables[[yvar]]==3] <- 2
  design$variables[[yvar]][design$variables[[yvar]]==4] <- 2

  xt <- survey::svytable(as.formula(paste0("~", yvar, "+", xvar)),
                         design, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::group_by(!!sym(xvar)) %>%
    dplyr::mutate(pct =  round(n/sum(n), 4))

  tot <- survey::svytable(as.formula(paste0("~", yvar)),
                          design, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
    dplyr::mutate(!!sym(xvar) := "Total", .after = 1)


  # labs <- sjlabelled::get_labels(design$variables[[yvar]])
  # netlabs <- c(paste(labs[[1]], "+", labs[[2]]),
  #              paste(labs[[3]], "+", labs[[4]]),
  #              labs[[5]])
  netlabs <- c("Agree", "Disagree", "DKNA")
  xlabs <- c(sjlabelled::get_labels(design$variables[[xvar]]), "Total")

  out <- rbind(xt, tot) %>% mutate(!!sym(yvar) := netlabs)
  out[[yvar]] <- factor(out[[yvar]], levels = netlabs)
  out[[xvar]] <- factor(out[[xvar]], levels = xlabs)

  attr(out, "label") <- sjlabelled::get_label(design$variables[[yvar]])
  return(out)

}
out <- ctabsnet4(s, yvar = "a2a", xvar = "region")
out
summary(out)


# ctabsnet7 --------------------------------------------------------------------

ctabsnet7 <- function(design, yvar, xvar, ...) {

  design$variables[[yvar]][design$variables[[yvar]]==1] <- 1
  design$variables[[yvar]][design$variables[[yvar]]==2] <- 1
  design$variables[[yvar]][design$variables[[yvar]]==3] <- 1
  design$variables[[yvar]][design$variables[[yvar]]==4] <- 2
  design$variables[[yvar]][design$variables[[yvar]]==5] <- 2
  design$variables[[yvar]][design$variables[[yvar]]==6] <- 3
  design$variables[[yvar]][design$variables[[yvar]]==7] <- 3

  xt <- survey::svytable(as.formula(paste0("~", yvar, "+", xvar)),
                         design, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::group_by(!!sym(xvar)) %>%
    dplyr::mutate(pct =  round(n/sum(n), 4))

  tot <- survey::svytable(as.formula(paste0("~", yvar)),
                          design, round = TRUE) %>%
    dplyr::as_tibble() %>%
    dplyr::mutate(pct =  round(n/sum(n), 4)) %>%
    dplyr::mutate(!!sym(xvar) := "Total", .after = 1)


  # labs <- sjlabelled::get_labels(design$variables[[yvar]])
  # netlabs <- c(paste(labs[[1]], "+", labs[[2]]),
  #              paste(labs[[3]], "+", labs[[4]]),
  #              labs[[5]])
  netlabs <- c("Low 3", "Mid 2", "High 3", "DKNA")
  xlabs <- c(sjlabelled::get_labels(design$variables[[xvar]]), "Total")

  out <- rbind(xt, tot) %>% mutate(!!sym(yvar) := netlabs)
  out[[yvar]] <- factor(out[[yvar]], levels = netlabs)
  out[[xvar]] <- factor(out[[xvar]], levels = xlabs)

  attr(out, "label") <- sjlabelled::get_label(design$variables[[yvar]])
  return(out)

}
s$variables$test7pt <- runif(nrow(s$variables), min=1, max=9)
s$variables$test7pt <- round(s$variables$test7pt)
s$variables$test7pt[s$variables$test7pt==8] <- 9
out <- ctabsnet7(s, yvar = "test7pt", xvar = "region")
out
summary(out)






# plots test -------------------------------------------------------------------

ctabs(s, xvar = "a2a", yvar = "region") %>%
  pivot_wider(names_from = region,
              values_from = pct) %>%
  mutate(a2a = likertlabs)

library(ggplot2)
myxt(s, xvar = "a2a", yvar = "region") %>%
  mutate(a2a = likertlabs,
         a2a = factor(a2a, levels = rev(likertlabs))) %>%
  ggplot() +
  aes(x = region, y = pct, fill = a2a) +
  geom_bar(stat = "identity") +
  geom_text(aes(x = region, y = pct, label = paste0(round(pct*100),"%")),
            position = position_fill(vjust = .5)) +
  scale_fill_manual(values = jbor_pal) +
  scale_y_continuous(labels = NULL) +
  labs(title = "Hope in oil and gas by region",
       subtitle = "Question: 25 years from now, oil and gas will still be Alberta's most important industry",
       x = NULL,
       y = NULL,
       fill = "Response") +
  theme_classic() +
  coord_flip()
